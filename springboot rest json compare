The detailed implementation in Spring Boot to compare JSON objects, support path-based comparison, and allow for on-demand comparisons of specific JSON values. We’ll use Jackson’s ObjectMapper for JSON processing, and I’ll also provide an alternative way using JSONPath for path-specific comparisons.

Project Structure

json-comparison-api/
├── src
│   ├── main
│   │   └── java
│   │       └── com
│   │           └── example
│   │               └── jsoncomparison
│   │                   ├── JsonComparisonController.java
│   │                   ├── JsonComparisonService.java
│   │                   └── JsonComparisonUtils.java
│   └── test
│       └── java
│           └── com
│               └── example
│                   └── jsoncomparison
│                       └── JsonComparisonControllerTest.java
└── pom.xml


Dependencies (pom.xml)


<dependencies>
    <!-- Spring Boot Starter Web -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- Jackson for JSON processing -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>

    <!-- JSONPath for alternative path-specific comparisons -->
    <dependency>
        <groupId>com.jayway.jsonpath</groupId>
        <artifactId>json-path</artifactId>
        <version>2.7.0</version>
    </dependency>

    <!-- Spring Boot Starter Test -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>


1. JsonComparisonController.java

This controller exposes REST endpoints for JSON comparison and path-based comparison.

package com.example.jsoncomparison;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/json")
public class JsonComparisonController {

    private final JsonComparisonService jsonComparisonService;

    public JsonComparisonController(JsonComparisonService jsonComparisonService) {
        this.jsonComparisonService = jsonComparisonService;
    }

    @PostMapping("/compare")
    public ResponseEntity<Map<String, Object>> compareJsons(
            @RequestBody Map<String, Object> requestBody) {
        String json1 = (String) requestBody.get("json1");
        String json2 = (String) requestBody.get("json2");
        return ResponseEntity.ok(jsonComparisonService.compareJsonObjects(json1, json2));
    }

    @PostMapping("/compare/path")
    public ResponseEntity<String> compareJsonAtPath(
            @RequestBody Map<String, Object> requestBody) {
        String json1 = (String) requestBody.get("json1");
        String json2 = (String) requestBody.get("json2");
        String path = (String) requestBody.get("path");
        boolean result = jsonComparisonService.compareJsonAtPath(json1, json2, path);
        return ResponseEntity.ok(result ? "Match at path" : "Mismatch at path");
    }

    @PostMapping("/compare/value")
    public ResponseEntity<String> compareJsonValue(
            @RequestBody Map<String, Object> requestBody) {
        String json = (String) requestBody.get("json");
        String path = (String) requestBody.get("path");
        String expectedValue = (String) requestBody.get("expectedValue");
        boolean result = jsonComparisonService.compareJsonValue(json, path, expectedValue);
        return ResponseEntity.ok(result ? "Value matches" : "Value does not match");
    }
}


2. JsonComparisonService.java

This service contains the core logic for comparing JSON objects and performing path-specific comparisons.

package com.example.jsoncomparison;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class JsonComparisonService {

    private final ObjectMapper objectMapper;

    public JsonComparisonService(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public Map<String, Object> compareJsonObjects(String json1, String json2) {
        Map<String, Object> result = new HashMap<>();
        try {
            JsonNode node1 = objectMapper.readTree(json1);
            JsonNode node2 = objectMapper.readTree(json2);

            result.put("areEqual", node1.equals(node2));
            result.put("differences", JsonComparisonUtils.findDifferences(node1, node2));
        } catch (Exception e) {
            result.put("error", e.getMessage());
        }
        return result;
    }

    public boolean compareJsonAtPath(String json1, String json2, String path) {
        try {
            Object value1 = JsonPath.read(json1, path);
            Object value2 = JsonPath.read(json2, path);
            return value1.equals(value2);
        } catch (Exception e) {
            return false;
        }
    }

    public boolean compareJsonValue(String json, String path, String expectedValue) {
        try {
            Object actualValue = JsonPath.read(json, path);
            return expectedValue.equals(String.valueOf(actualValue));
        } catch (Exception e) {
            return false;
        }
    }
}

3. JsonComparisonUtils.java

Utility methods for finding differences between two JSON objects.


package com.example.jsoncomparison;

import com.fasterxml.jackson.databind.JsonNode;

import java.util.ArrayList;
import java.util.List;

public class JsonComparisonUtils {

    public static List<String> findDifferences(JsonNode node1, JsonNode node2) {
        List<String> differences = new ArrayList<>();
        findDifferences("", node1, node2, differences);
        return differences;
    }

    private static void findDifferences(String path, JsonNode node1, JsonNode node2, List<String> differences) {
        if (node1.equals(node2)) {
            return;
        }

        if (node1.isObject() && node2.isObject()) {
            node1.fieldNames().forEachRemaining(field -> {
                String newPath = path.isEmpty() ? field : path + "." + field;
                if (node2.has(field)) {
                    findDifferences(newPath, node1.get(field), node2.get(field), differences);
                } else {
                    differences.add("Missing field in second JSON: " + newPath);
                }
            });

            node2.fieldNames().forEachRemaining(field -> {
                if (!node1.has(field)) {
                    differences.add("Extra field in second JSON: " + path + "." + field);
                }
            });
        } else if (node1.isArray() && node2.isArray()) {
            for (int i = 0; i < Math.max(node1.size(), node2.size()); i++) {
                String newPath = path + "[" + i + "]";
                if (i < node1.size() && i < node2.size()) {
                    findDifferences(newPath, node1.get(i), node2.get(i), differences);
                } else if (i < node1.size()) {
                    differences.add("Missing element in second JSON: " + newPath);
                } else {
                    differences.add("Extra element in second JSON: " + newPath);
                }
            }
        } else {
            differences.add("Difference at " + path + ": " + node1 + " vs " + node2);
        }
    }
}


4. JsonComparisonControllerTest.java

Unit tests for the JSON comparison API.

package com.example.jsoncomparison;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class JsonComparisonControllerTest {

    private final TestRestTemplate restTemplate = new TestRestTemplate();

    @Test
    public void testCompareJsonObjects() {
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("json1", "{\"name\":\"John\", \"age\":30}");
        requestBody.put("json2", "{\"name\":\"John\", \"age\":31}");

        ResponseEntity<Map> response = restTemplate.postForEntity("/api/json/compare", requestBody, Map.class);

        Map<String, Object> result = response.getBody();
        assertEquals(false, result.get("areEqual"));
    }

    @Test
    public void testCompareJsonAtPath() {
        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("json1", "{\"name\":\"John\", \"age\":30}");
        requestBody.put("json2", "{\"name\":\"John\", \"age\":31}");
        requestBody.put("path", "$.age");

        ResponseEntity<String> response = restTemplate.postForEntity("/api/json/compare/path", requestBody, String.class);

        assertEquals("Mismatch at path", response.getBody());
    }
}


Testing with cURL or Postman

	1.	Compare Two JSON Objects:
	•	Endpoint: POST /api/json/compare
	•	Request Body:

{
  "json1": "{\"name\":\"John\", \"age\":30}",
  "json2": "{\"name\":\"John\", \"age\":31}"
}


	2.	Compare JSON at a Specific Path:
	•	Endpoint: POST /api/json/compare/path
	•	Request Body:


{
  "json1": "{\"name\":\"John\", \"age\":30}",
  "json2": "{\"name\":\"John\", \"age\":31}",
  "path": "$.age"
}



	3.	Compare JSON Value at Path:
	•	Endpoint: POST /api/json/compare/value
	•	Request Body:


{
  "json": "{\"name\":\"John\", \"age\":30}",
  "path": "$.name",
  "expectedValue": "John"
}

Summary

	•	Path-Based Comparisons: Use JSONPath for specific field comparisons.
	•	Full Object Comparisons: Use Jackson’s ObjectMapper for in-depth analysis.
	•	Utility Class: JsonComparisonUtils helps detect differences in nested structures.
	•	Spring Boot REST API: Exposes endpoints for flexible comparisons.
