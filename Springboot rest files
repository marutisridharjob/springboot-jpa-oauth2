no Spring Boot REST endpoint for accepting multiple files and writing them to a local directory:

@RestController
@RequestMapping("/files")
public class FileUploadController {

    private static final String UPLOAD_DIR = "uploads";

    @PostConstruct
    public void init() {
        File directory = new File(UPLOAD_DIR);
        if (!directory.exists()) {
            directory.mkdirs();
        }
    }


@PostMapping("/uploadFiles")
public ResponseEntity<String> uploadFiles(
        @RequestParam("files") MultipartFile[] files,
        @RequestParam(value = "IndexOrValue", required = false) String indexOrValue) {
    if (indexOrValue != null && !indexOrValue.isEmpty()) {
        // Handle additional field
    }
    // File processing logic here
    return ResponseEntity.ok("Files uploaded successfully!");
}



    @PostMapping("/upload")
    public ResponseEntity<String> uploadFiles(@RequestParam("files") MultipartFile[] files) {
        StringBuilder message = new StringBuilder();

        for (MultipartFile file : files) {
            try {
                File targetFile = new File(UPLOAD_DIR, file.getOriginalFilename());
                file.transferTo(targetFile);
                message.append("File uploaded: ").append(targetFile.getName()).append("\n");
            } catch (IOException e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Failed to upload files: " + e.getMessage());
            }
        }
        return ResponseEntity.ok(message.toString());
    }
}

Key Points:

	1.	Endpoint: /files/upload accepts multiple files via the files parameter.
	2.	Directory Creation: Ensures the uploads directory exists.
	3.	Saving Files: Each file is written to the uploads directory.
	4.	Response: Returns a success message for uploaded files.

Configure application.properties for file size limits if needed:

spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=50


--------


@RestController
@RequestMapping("/api")
public class FileUploadController {

    private static final String UPLOAD_DIR = "uploads";

    @PostConstruct
    public void init() {
        File directory = new File(UPLOAD_DIR);
        if (!directory.exists()) {
            directory.mkdirs();
        }
    }

    @PostMapping(value = "/uploadFiles", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    @Operation(
        summary = "Upload multiple files",
        description = "This endpoint allows uploading multiple files",
        requestBody = @io.swagger.v3.oas.annotations.parameters.RequestBody(
            content = @Content(
                mediaType = MediaType.MULTIPART_FORM_DATA_VALUE,
                schema = @Schema(
                    type = "object",
                    properties = {
                        @SchemaProperty(
                            name = "files",
                            schema = @Schema(type = "array", items = @Schema(type = "string", format = "binary"))
                        )
                    }
                )
            )
        )
    )
    public ResponseEntity<String> uploadFiles(@RequestParam("files") MultipartFile[] files) {
        StringBuilder message = new StringBuilder();
        for (MultipartFile file : files) {
            try {
                File targetFile = new File(UPLOAD_DIR, file.getOriginalFilename());
                file.transferTo(targetFile);
                message.append("Uploaded file: ").append(file.getOriginalFilename()).append("\n");
            } catch (IOException e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Failed to upload files: " + e.getMessage());
            }
        }
        return ResponseEntity.ok(message.toString());
    }
}

Key Points

	1.	Swagger Annotations:
	•	Use @Schema and @Content to define the expected MultipartFile array in Swagger UI.
	•	Specify type = "array" with items of type string and format = "binary".
	2.	Ensure Correct MIME Type:
	•	Use MediaType.MULTIPART_FORM_DATA_VALUE in both the @PostMapping and @Operation annotations.
	3.	Swagger UI Setup:
	•	This configuration ensures the Swagger UI generates a file input field that supports selecting multiple files.
	4.	Folder for File Storage:
	•	The uploads folder is created automatically if it doesn’t exist.

With this configuration, Swagger UI should display a file input field that allows selecting multiple files for the files parameter. Let me know if this resolves the issue or if additional tweaks are needed.


---------


@RestController
@RequestMapping("/api/files")
public class FileUploadController {

    private static final String UPLOAD_DIR = "uploads";

    @PostConstruct
    public void init() {
        File directory = new File(UPLOAD_DIR);
        if (!directory.exists()) {
            directory.mkdirs();
        }
    }

    @PostMapping(value = "/upload", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<String> uploadFiles(
            @RequestPart("files") MultipartFile[] files,
            @RequestPart(value = "indexOrValue", required = false) String indexOrValue) {
        
        StringBuilder responseMessage = new StringBuilder("Uploaded Files:\n");
        for (MultipartFile file : files) {
            try {
                File destinationFile = new File(UPLOAD_DIR, file.getOriginalFilename());
                file.transferTo(destinationFile);
                responseMessage.append(file.getOriginalFilename()).append("\n");
            } catch (IOException e) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body("Error uploading files: " + e.getMessage());
            }
        }
        responseMessage.append("IndexOrValue: ").append(indexOrValue);
        return ResponseEntity.ok(responseMessage.toString());
    }
}


-------------------------

Here is a concise code snippet to achieve the requirements in two Spring Boot applications:


Application 1: Finding and Sending Files

@RestController
@RequestMapping("/files")
public class FileController {

    @GetMapping("/upload")
    public ResponseEntity<List<FileResponse>> uploadFiles() throws IOException {
        Path folderPath = Paths.get("C:/local-folder"); // Specify your folder path
        List<FileResponse> files = Files.list(folderPath)
                .filter(Files::isRegularFile)
                .map(path -> {
                    try {
                        return new FileResponse(path.getFileName().toString(), Files.readAllBytes(path));
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }).toList();
        return ResponseEntity.ok(files);
    }
}

class FileResponse {
    private String fileName;
    private byte[] content;

    // Getters and Setters
    public FileResponse(String fileName, byte[] content) {
        this.fileName = fileName;
        this.content = content;
    }
}


Application 2: Receiving and Writing Files


@RestController
@RequestMapping("/files")
public class FileReceiverController {

    @PostMapping("/receive")
    public ResponseEntity<String> receiveFiles(@RequestBody List<FileResponse> files) {
        Path outputFolder = Paths.get("C:/output-folder"); // Specify your output folder path
        try {
            for (FileResponse file : files) {
                Path filePath = outputFolder.resolve(file.getFileName());
                Files.write(filePath, file.getContent());
            }
            return ResponseEntity.ok("Files received and saved successfully.");
        } catch (IOException e) {
            throw new RuntimeException("Error writing files to folder", e);
        }
    }
}

class FileResponse {
    private String fileName;
    private byte[] content;

    // Getters and Setters
}


Explanation:
	1.	First Application (uploadFiles Endpoint):
	•	Scans the specified folder for files.
	•	Reads the file names and contents into a FileResponse object.
	•	Sends the list of files as a JSON response.
	2.	Second Application (receiveFiles Endpoint):
	•	Accepts a list of FileResponse objects.
	•	Writes each file to the specified output folder.

Dependencies:

Add spring-boot-starter-web dependency to both applications’ pom.xml.

----------

Here’s the updated implementation using MultipartFile from Spring Framework:

Application 1: Sending Files as Multipart

MultipartFile is primarily designed for receiving files, not for sending them. However, you can mimic the behavior by creating a similar structure in the response using a MultiValueMap to send files, and the receiving application can handle them as MultipartFile. Below is the revised implementation:

@RestController
@RequestMapping("/files")
public class FileController {

    @GetMapping("/upload")
    public ResponseEntity<MultiValueMap<String, Object>> uploadFiles() throws IOException {
        Path folderPath = Paths.get("C:/local-folder"); // Specify your folder path
        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();

        Files.list(folderPath)
                .filter(Files::isRegularFile)
                .forEach(path -> {
                    try {
                        FileSystemResource fileResource = new FileSystemResource(path.toFile());
                        body.add("files", fileResource);
                    } catch (Exception e) {
                        throw new RuntimeException("Error reading file: " + path, e);
                    }
                });

        return ResponseEntity.ok(body);
    }
}


Application 2: Receiving Multipart Files

@RestController
@RequestMapping("/files")
public class FileReceiverController {

    @PostMapping(value = "/receive", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<String> receiveFiles(@RequestParam("files") List<MultipartFile> files) {
        Path outputFolder = Paths.get("C:/output-folder"); // Specify your output folder path
        try {
            for (MultipartFile file : files) {
                Path filePath = outputFolder.resolve(file.getOriginalFilename());
                Files.write(filePath, file.getBytes());
            }
            return ResponseEntity.ok("Files received and saved successfully.");
        } catch (IOException e) {
            throw new RuntimeException("Error writing files to folder", e);
        }
    }
}

Explanation:
	1.	First Application (uploadFiles Endpoint):
	•	Reads files from a local folder.
	•	Wraps each file in a FileSystemResource to enable streaming as MultipartFile.
	•	Sends files in a MultiValueMap response.
	2.	Second Application (receiveFiles Endpoint):
	•	Receives files as a List<MultipartFile>.
	•	Writes each file to the local folder using Files.write.

